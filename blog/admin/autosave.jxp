<%
// AJAX handler to save a copy of a post to blog.drafts.
// If we're autosaving a "real" blog post, we save a copy with all the relevant
// information, and associate it with the post by marking the draft with a 
// post_id field which has the ID of the post.
// Then we print the id of the new draft so that the browser knows what draft 
// they're editing.
//
// If we're autosaving a draft, we just resave the draft with the updated info.
// We still add a post_id field which doesn't have any meaning, and then we
// tell the browser about this field just to be consistent. FIXME.

core.blog.ping();
core.blog.post();
core.blog.category();

var id = request.id;

var newPost = true;
var thePost = new Post();
thePost.cls = request.cls || "entry";
thePost.author = user.name;

if (id) {
    foundPost = db.blog.posts.findOne( CrID( id ) );
    if (foundPost) {
        thePost = foundPost;
        thePost.post_id = ObjId(id);
        newPost = false;
    }
    else {
        foundPost = db.blog.drafts.findOne({ post_id : ObjId(id) }) || db.blog.drafts.findOne({ _id: ObjId(id) });
        if(foundPost) {
            thePost = foundPost;
            newPost = false;
        }
    }
}
if (!thePost.post_id) thePost.post_id = ObjId();

thePost.title = request.title;
thePost.content = decodeURIComponent(request.content);
thePost.excerpt = decodeURIComponent(request.excerpt);
thePost.ts = new Date( request.ts );
if ( request.author )
    thePost.author = request.author;

thePost.categories = request.getParameters('categories') || [];

if (request.new_categories) {
    request.new_categories.split('[,]').forEach( function( newName ){
	newName = newName.trim();
	if ( newName.length == 0 )
	    return;

	var found = false;
	thePost.categories.forEach( function( old ){
	    if ( old.toLowerCase() == newName.toLowerCase() )
		found = true;
	} );
	if ( found )
	    return;

	var cat = Category.find( newName );
	if ( ! cat ){
	    cat = new Category( newName , newName );
	    db.blog.categories.save( cat );
	}
	thePost.categories.push( cat.name );
    } );
}

thePost.categories = thePost.categories.unique().sort();
thePost.name = request.name;

thePost.live = parseBool( request.live );
thePost.commentsEnabled = parseBool(request.commentsEnabled);
thePost.suppressImage = parseBool( request.suppressImage );

/*if ( Blog.extraFields ){
    for ( var extraFieldName in Blog.extraFields ){
	var extraVal = request[ "extra_" + extraFieldName ];
	var extraConfig = Blog.extraFields[extraFieldName];
	log( "extraConfig : " + tojson( extraConfig ) );
	if ( extraConfig.parseFunction ){
	    log( "parsing" );
	    extraVal = extraConfig.parseFunction( extraVal );
	}
	thePost[ extraFieldName ] = extraVal;
    }
}*/

db.blog.drafts.save( thePost );
print(thePost.post_id);

%>
