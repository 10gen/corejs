core.util.urltree();
/** @class User.Perm: permissions object.
 *  Grants or denies permission to access URLs.
 *  The interface for a permission object is the method allowed(user, request[, uri]).
 *  This method returns true or false.
 * @docmodule core.user.perm
 */
User.Perm = Class.create(Util.URLTree, {
    /**
     *  @scope User.Perm
     *  @constructor
     *  @param {Object} args Configuration attributes.
     *     {boolean} closed Whether to "fail-closed" or not.
     */
    initialize: function(args){
        args = args || {};
        Util.URLTree.call(this);
        var def = true;
        if(args.closed) def = false;
        this.setDefault(def, {});
    },
    /**
     *  @param {User} user The user to check permissions for.
     *  @param {AppRequest} request The request itself. Sometimes null,
     *         if we just want to check whether the user could conceivably
     *         access this URL.
     *  @param {String} uri The relative URI to check permissions for.
     *  @return true if the user has permission to access this, false otherwise
     */
    allowed: function(user, request, uri){
        if(uri == null) uri = request.getURI();
        var recursefunc = function(next, uri, request, extras){
            return next.allowed(user, request, uri);
        };
        var r = this.apply(recursefunc, uri, request, user);
        return r;
    }, // fail open like allowed()

    /**
     *  Internal method to allow Util.URLTree to tell whether to recurse on a
     *  subobject.
     *  @private
     */
    canRecurse: function(next){ return next.allowed; },

    /**
     *  How to handle a terminal.
     *  Typically: return it.
     *  @private
     */
    terminal: function(end, uri, request, firstPiece, key, value, extras){
        User.Perm.log.debug("Got a terminal " + tojson(end));
        if(isObject(end) && end.allowed) return end.allowed(user, request);
        return end;
    },

    /**
     *  How to handle an empty string (for example, getting the URL admin/blog).
     *  FIXME: is this right??
     *  @private
     */
    emptyString: function(uri, request, extras){
        var user = extras;
        return this.allowed(user, request);
    },

    /**
     * How to handle the result generated by a subobject.
     * Just return it; they probably know what they were doing.
     * @private
     */
    unwind: function(result, uri, request, firstPiece, key, value, extras){
        User.Perm.log.debug("Unwinding " + tojson(result));
        return result;
    },
});


User.Perm.log = log.user.perm;
User.Perm.log.level = log.LEVEL.ERROR;
