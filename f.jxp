<% /**
*      Copyright (C) 2008 10gen Inc.
*  
*    Licensed under the Apache License, Version 2.0 (the "License");
*    you may not use this file except in compliance with the License.
*    You may obtain a copy of the License at
*  
*       http://www.apache.org/licenses/LICENSE-2.0
*  
*    Unless required by applicable law or agreed to in writing, software
*    distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*    See the License for the specific language governing permissions and
*    limitations under the License.
*/ %>

<%
/* send a file to user via http.  files are stored in the database in the _files and _chunks collections.

   scaling handled here too for images.
*/

var sentFile = false;
var file = null;
var cacheScaled = false;

log.f.level = log.LEVEL.ERROR;

request.applyServletParams( /~~\/f\/(.*)/ , [ "extra" ] );

var id = request.id;

log.f.debug( id );

if ( id )
    file = db._files.findOne( { _id : CrID( id ) } );

if ( ! file && request.name ){
    var cursor = db._files.find( { filename : request.name } ).sort( { uploadDate : -1 } ).limit(1);
    if ( cursor.hasNext() )
	file = cursor.next();
}

if ( ! file && request.extra ){
    var cursor = db._files.find( { filename : request.extra } ).sort( { uploadDate : -1 } ).limit(1);
    if ( cursor.hasNext() )
	file = cursor.next();
    else {
        var cursor = db._files.find( { aliases : request.extra } ).sort( { uploadDate : -1 } ).limit(1);
        if ( cursor.hasNext() ){
	    file = cursor.next();
            return response.sendRedirectTemporary( "/~~/f/" + file.filename );
        }
    }
}

if ( ! file ){
    response.setResponseCode( 404 );
    return;
}

if ( file.contentType && file.contentType.match( /image/ ) ){
    
    if ( request.maxX || request.maxY ){
        
        var options = "scale-" + request.maxX + "x" + request.maxY;
        var newFile = null;
        
        if ( file.options ){

            if ( cacheScaled )
		newFile = db._files.findOne( file.options );

	    if ( newFile )
		log.f.scale.debug( "using cached for " + options );
        }
        
        if ( ! newFile ){
            core.media.image();
            var img = new Media.Image( file );
            
            newFile = img.scaleToMaxSize( request.maxX , request.maxY );
	    if ( cacheScaled ){
		db._files.save( newFile );
		file.options = newFile._id;
		db._files.save( file );
	    }
            
            log.f.scale.debug( "doing auto scale for " + options );
        }

        if ( newFile )
            file = newFile;
        
    }

}

response.sendFile( file );


%>
